# -*- coding: utf-8 -*-
"""Online Grocery Mart System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WwFX7Qc0FQpQxyZeD_kjtVfPt7tm-ZMS
"""

import os
import re
import random

# ---------- File Constants ----------
ORDERS_FILE = "orders.txt"
USERS_FILE = "users.txt"

# ---------- Product & Customer Classes ----------
class Product:
    def __init__(self, name, price, quantity=10):
        self.name = name
        self.price = int(price)
        self.quantity = int(quantity)

    def __str__(self):
        return f"{self.name} - Rs. {self.price} - Qty: {self.quantity}"

class Customer:
    customer_count = 0

    def __init__(self, name, phone, address, email):
        Customer.customer_count += 1
        self.customer_id = Customer.customer_count
        self.name = name
        self.phone = phone
        self.address = address
        self.email = email
        self.cart = []
        self.payment_method = ""
        self.bank_name = ""
        self.account_number = ""

    def add_to_cart(self, product, qty):
        for _ in range(qty):
            self.cart.append(Product(product.name, product.price))

    def calculate_total(self):
        return sum(product.price for product in self.cart)

    def save_order(self):
        with open(ORDERS_FILE, "a") as f:
            f.write(f"Customer ID: {self.customer_id}\n")
            f.write(f"Name: {self.name}, Phone: {self.phone}, Email: {self.email}, Address: {self.address}\n")
            f.write("Cart Items:\n")
            cart_summary = {}
            for item in self.cart:
                cart_summary[item.name] = cart_summary.get(item.name, 0) + 1
            for name, qty in cart_summary.items():
                price = next((item.price for item in self.cart if item.name == name), 0)
                f.write(f"- {name} x{qty}: Rs. {price * qty}\n")
            f.write(f"Total: Rs. {self.calculate_total()}\n")
            f.write(f"Payment Method: {self.payment_method}\n")
            if self.payment_method.lower() == "online":
                f.write(f"Bank Name: {self.bank_name}\n")
                f.write(f"Account Number: {self.account_number}\n")
            f.write("------------------------------------------------------\n")

def generate_products(names, min_price, max_price):
    return [Product(name, random.randint(min_price, max_price)) for name in names]

def load_products():
    categories = {}

    categories["Fruits"] = generate_products(
        ["Apple", "Banana", "Orange", "Mango", "Grapes", "Pineapple", "Strawberry", "Blueberry", "Watermelon",
         "Papaya", "Guava", "Peach", "Pear", "Plum", "Cherry", "Kiwi", "Fig", "Pomegranate", "Coconut", "Avocado",
         "Lemon", "Lychee", "Raspberry", "Blackberry", "Melon", "Tangerine", "Nectarine", "Passionfruit",
         "Dragonfruit", "Mulberry", "Starfruit", "Jackfruit", "Apricot", "Cranberry", "Dates", "Durian",
         "Gooseberry", "Jujube", "Kumquat", "Longan", "Loquat", "Olive", "Quince", "Rambutan", "Soursop",
         "Ugli Fruit", "Tamarind", "Cantaloupe", "Sapodilla"], 50, 200
    )
    categories["Girls Items"] = generate_products(
        ["Lipstick", "Eyeliner", "Foundation", "Handbag", "Scarf", "Jewelry Set", "Nail Polish", "Heels", "Mascara",
         "Bracelet", "Blush", "Compact Powder", "Hair Straightener", "Hair Curler", "Perfume", "Makeup Kit",
         "Mirror", "Sunglasses", "Skirt", "Top", "Earrings", "Clutch", "Bangles", "Anklet", "Dupatta", "Gown",
         "Shawl", "Kurti", "Tunic", "Leggings", "Lip Balm", "Compact Mirror", "Comb", "Face Wash", "Moisturizer",
         "Serum", "Face Mask", "Scrunchie", "Nose Pin", "Body Spray", "Toiletry Bag", "Sling Bag", "Blouse",
         "Watch", "Brooch", "Necklace", "Ring", "Hair Band", "Wallet"], 100, 1000
    )
    categories["Men Items"] = generate_products(
        ["Shirt", "Watch", "Wallet", "Perfume", "Shoes", "Tie", "Belt", "Jeans", "Cap", "Blazer", "Suit", "Cufflinks",
         "T-shirt", "Sweater", "Jacket", "Track Suit", "Shorts", "Sandals", "Backpack", "Gloves", "Scarf", "Socks",
         "Shaving Kit", "Beard Oil", "Comb", "Sunglasses", "Loafers", "Briefcase", "Hoodie", "Raincoat", "Thermal Wear",
         "Hair Gel", "Face Wash", "Beard Trimmer", "Lotion", "Hat", "Ring", "Bracelet", "Keychain", "Laptop Bag",
         "Gym Bag", "Boots", "Innerwear", "Vest", "Kurta", "Pajama", "Waistcoat", "Joggers", "Overcoat"], 150, 1200
    )
    categories["Home Items"] = generate_products(
        ["Sofa", "Chair", "Table", "Curtains", "Lamp", "Rug", "Cushion", "Blanket", "Bedsheet", "Mattress",
         "Fan", "Mirror", "Clock", "Shelf", "Drawer", "TV Stand", "Wall Art", "Vase", "Doormat", "Laundry Basket",
         "Iron", "Toaster", "Microwave", "Cookware", "Plate Set", "Cup Set", "Fridge", "Blender", "Grinder", "Water Dispenser",
         "Vacuum", "Mop", "Bucket", "Dustbin", "Hanger", "Shoe Rack", "Table Cloth", "Serving Tray", "Knife Set",
         "Cutting Board", "Glass Set", "Pan", "Pressure Cooker", "Spice Rack", "Tissue Holder", "Curtain Rod", "Chair Pad",
         "Mirror Frame", "Stool"], 100, 800
    )
    categories["Grocery Items"] = generate_products(
        ["Rice", "Wheat", "Sugar", "Tea", "Milk", "Salt", "Pepper", "Oil", "Flour", "Chili Powder", "Turmeric",
         "Coriander", "Cumin", "Garlic", "Onion", "Tomato Paste", "Ketchup", "Jam", "Honey", "Vinegar", "Soy Sauce",
         "Yeast", "Baking Soda", "Baking Powder", "Lentils", "Beans", "Pasta", "Noodles", "Soup Packet", "Butter",
         "Cheese", "Cream", "Cereal", "Oats", "Bread", "Buns", "Biscuits", "Chips", "Popcorn", "Dry Fruits",
         "Juice", "Pickle", "Coffee", "Ice Cream", "Mustard", "Mayonnaise", "Sauce", "Chocolate", "Cookies", "Raisins"], 20, 300
    )
    categories["Kids Items"] = generate_products(
        ["Toy Car", "Doll", "Color Pencils", "Story Book", "Ball", "Puzzle", "Teddy Bear", "Building Blocks",
         "Crayons", "Color Book", "Lunch Box", "Water Bottle", "School Bag", "Eraser", "Sharpener", "Pencil Case",
         "Board Game", "Remote Car", "Drawing Pad", "Sticker Set", "Skates", "Helmet", "Bicycle", "Tricycle",
         "Swing", "Slide", "Toy Train", "Action Figure", "Barbie", "Lego Set", "Yo-yo", "Spinning Top", "Slime",
         "Clay", "Alphabet Book", "Number Book", "Flash Cards", "Magic Board", "Toy Gun", "Soft Ball", "Glider",
         "Musical Toy", "Mini Keyboard", "Toy Phone", "Pop It", "Skipping Rope", "Finger Puppets", "Kite",
         "Inflatable Pool", "Bubble Maker"], 50, 500
    )

    return categories

def is_valid_email(email):
    return re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email)

def load_users():
    users = {}
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            for line in f:
                email, password = line.strip().split("|")
                users[email] = password
    return users

def save_user(email, password):
    with open(USERS_FILE, "a") as f:
        f.write(f"{email}|{password}\n")

def signup():
    users = load_users()
    while True:
        email = input("Enter your email: ").strip()
        if not is_valid_email(email):
            print("❌ Invalid email format.")
            continue
        if email in users:
            print("❌ Email already registered.")
            return None
        break
    password = input("Enter your password: ")
    save_user(email, password)
    print("✅ Signup successful.")
    return email

def login():
    users = load_users()
    email = input("Enter your email: ").strip()
    password = input("Enter your password: ")
    if users.get(email) == password:
        print("✅ Login successful.")
        return email
    else:
        print("❌ Invalid credentials.")
        return None

def take_location():
    province = input("Enter your province: ")
    city = input("Enter your city: ")
    area = input("Enter your area: ")
    address = f"{area}, {city}, {province}"
    with open("addresses.txt", "a") as f:
        f.write(f"{address}\n")
    return address

def user_shop(email, inventory):
    address = take_location()
    name = input("Enter your name: ")
    phone = input("Enter phone number: ")
    customer = Customer(name, phone, address, email)
    categories = list(inventory.keys())

    while True:
        print("\nProduct Categories:")
        for i, c in enumerate(categories):
            print(f"{i+1}. {c}")
        choice = input("Choose category number or 'q' to quit: ")
        if choice.lower() == "q":
            break
        if choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(categories):
                cat = categories[idx]
                while True:  # Stay inside this category until user presses 'b'
                    print(f"\n-- {cat} --")
                    for i, p in enumerate(inventory[cat]):
                        print(f"{i+1}. {p.name} - Rs. {p.price} (Qty: {p.quantity})")
                    p_choice = input("Select product number to buy, or 'b' to go back: ")
                    if p_choice.lower() == "b":
                        break
                    if p_choice.isdigit():
                        p_idx = int(p_choice) - 1
                        if 0 <= p_idx < len(inventory[cat]):
                            chosen = inventory[cat][p_idx]
                            if chosen.quantity <= 0:
                                print("❌ Sorry, this product is out of stock.")
                                continue
                            while True:
                                qty_str = input(f"Enter quantity to buy for '{chosen.name}' (Available: {chosen.quantity}): ")
                                if qty_str.isdigit():
                                    qty = int(qty_str)
                                    if 1 <= qty <= chosen.quantity:
                                        customer.add_to_cart(chosen, qty)
                                        chosen.quantity -= qty
                                        print(f"✅ Added {qty} x {chosen.name} to cart.")
                                        break
                                    else:
                                        print(f"❌ Please enter a quantity between 1 and {chosen.quantity}")
                                else:
                                    print("❌ Enter a valid numeric quantity.")
                        else:
                            print("❌ Invalid product number.")
                    else:
                        print("❌ Invalid input, please enter a product number or 'b'.")

    if customer.cart:
        print("\n--- Order Summary ---")
        cart_summary = {}
        for item in customer.cart:
            cart_summary[item.name] = cart_summary.get(item.name, 0) + 1
        for name, qty in cart_summary.items():
            price = next((item.price for item in customer.cart if item.name == name), 0)
            print(f"{name} x{qty}: Rs. {price * qty}")
        print(f"Total: Rs. {customer.calculate_total()}")
        payment = input("Enter payment method (Cash/Card/Online): ").strip().lower()
        customer.payment_method = payment
        if payment == "online":
            customer.bank_name = input("Enter bank name: ")
            customer.account_number = input("Enter account number: ")
        customer.save_order()
        print("✅ Order placed. 🚚")
        while True:
            next_act = input("\nType 'exit' to close the app, or press Enter to return to the main menu: ").strip().lower()
            if next_act == "exit":
                print("Thank you for shopping! Exiting now.")
                exit()
            else:
                return
    else:
        print("🛒 No items in cart. Order not placed.")

def admin_menu(inventory):
    categories = list(inventory.keys())
    while True:
        print("\nAdmin Menu:")
        print("1. View All Products & Quantities")
        print("2. Add Product to Category")
        print("3. Delete Product from Category")
        print("4. Update Quantity")
        print("5. Exit")
        choice = input("Enter your choice: ")
        if choice == "1":
            for cat, items in inventory.items():
                print(f"\nCategory: {cat}")
                for p in items:
                    print(p)
        elif choice == "2":
            for i, c in enumerate(categories):
                print(f"{i+1}. {c}")
            cat_choice = int(input("Category number: ")) - 1
            if 0 <= cat_choice < len(categories):
                cat = categories[cat_choice]
                name = input("Enter product name: ")
                price = int(input("Enter price: "))
                qty = int(input("Enter quantity: "))
                inventory[cat].append(Product(name, price, qty))
                print("✅ Product added.")
        elif choice == "3":
            for i, c in enumerate(categories):
                print(f"{i+1}. {c}")
            cat_choice = int(input("Category number: ")) - 1
            if 0 <= cat_choice < len(categories):
                cat = categories[cat_choice]
                for i, p in enumerate(inventory[cat]):
                    print(f"{i+1}. {p.name}")
                idx = int(input("Product index to delete: ")) - 1
                if 0 <= idx < len(inventory[cat]):
                    del inventory[cat][idx]
                    print("✅ Product deleted.")
        elif choice == "4":
            for i, c in enumerate(categories):
                print(f"{i+1}. {c}")
            cat_choice = int(input("Category number: ")) - 1
            if 0 <= cat_choice < len(categories):
                cat = categories[cat_choice]
                for i, p in enumerate(inventory[cat]):
                    print(f"{i+1}. {p.name} (Current Qty: {p.quantity})")
                idx = int(input("Product index to update quantity: ")) - 1
                if 0 <= idx < len(inventory[cat]):
                    new_qty = int(input("Enter new quantity: "))
                    inventory[cat][idx].quantity = new_qty
                    print("✅ Quantity updated.")
        elif choice == "5":
            print("Exiting admin menu...\n")
            break
        else:
            print("❌ Invalid option")

def main():
    inventory = load_products()
    while True:
        print("="*50)
        print("     WELCOME TO BUSHRA'S ONLINE MART 🛒")
        print("="*50)
        print("1. Login")
        print("2. Signup")
        print("3. Admin Login")
        print("4. Exit")
        choice = input("Choose option: ").strip()

        if choice == "1":
            email = login()
            if email:
                user_shop(email, inventory)

        elif choice == "2":
            email = signup()
            if email:
                user_shop(email, inventory)

        elif choice == "3":
            admin_user = input("Admin Username: ")
            admin_pass = input("Admin Password: ")
            if admin_user == "admin" and admin_pass == "admin123":
                print("✅ Admin logged in.")
                admin_menu(inventory)
            else:
                print("❌ Invalid admin credentials.")

        elif choice == "4":
            print("Exiting the application. Goodbye!")
            break

        else:
            print("❌ Invalid input. Please select a valid option.\n")

if __name__ == "__main__":
    main()